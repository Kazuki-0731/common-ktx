apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: "org.jlleitschuh.gradle.ktlint"
apply plugin: "org.jlleitschuh.gradle.ktlint-idea"
apply plugin: 'kotlin-kapt'
apply plugin: 'org.jetbrains.dokka'

group = 'com.github.sasa-nori'
android {
    compileSdkVersion 29
    //noinspection GradleDependency
    buildToolsVersion "29.0.2"

    defaultConfig {
        minSdkVersion 23
        targetSdkVersion 29
        versionCode 1
        versionName "1.0.4"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles 'consumer-rules.pro'
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
        encoding = 'UTF-8'
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

dependencies {
    api 'androidx.appcompat:appcompat:1.1.0'
    api "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    api 'androidx.core:core-ktx:1.2.0'
    api 'androidx.fragment:fragment-ktx:1.2.2'
    api 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.2.0'
    api 'com.android.support:support-annotations:28.0.0'
    api "com.squareup.moshi:moshi-kotlin:1.9.2"
    kapt "com.squareup.moshi:moshi-kotlin-codegen:1.9.2"

    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
}

// Build a jar with source files.
task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    failOnError false
    source = android.sourceSets.main.java.sourceFiles
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    classpath += configurations.compile
}

// Build a jar with javadoc.
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

import org.jlleitschuh.gradle.ktlint.reporter.ReporterType
ktlint {
    version = "0.22.0"
    android = true
    reporters = [ReporterType.CHECKSTYLE]
    ignoreFailures = true

    filter {
        exclude("**/*test*/**")
    }
}

dokka {
    outputFormat = 'markdown'
    outputDirectory = "../doc"
}